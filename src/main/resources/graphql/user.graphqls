type Query {
    userLogin(user: LoginUserRequest!): UserResponse
    deleteUser(userId: ID!): String
}

type Mutation {
    newUser(user: RegisterUserRequest!): UserResponse
    updateUser(user: RegisterUserRequest!, userId: ID!): UserResponse
    addRole(role: ROLES): String
}

enum ROLES {
    ROLE_GENERAL
    ROLE_ADMIN
    ROLE_BUSINESS_OWNER
}

input RegisterUserRequest {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    roles: [String]
}

input LoginUserRequest {
    email: String!
    password: String!
}

type UserResponse {
    id: ID
    firstName: String
    lastName: String
    email: String
    favorites: [FavoriteResponse]
    roles: [ROLES]
    jwtResponse: JwtResponse
    errorMessage: String
}

type JwtResponse {
    jwtToken: String
    tokenType: String
    id: ID
    username: String
    roles: [String]
    favorites: [FavoriteResponse]
}